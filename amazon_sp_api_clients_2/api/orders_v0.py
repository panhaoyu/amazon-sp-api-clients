"""
Selling Partner API for Orders
=============================================================================================

The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
API Version: v0
Contact Amazon: Selling Partner API Developer Support https://sellercentral.amazon.com/gp/mws/contactus.html
License for the OpenAPI file: Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0
"""
import attrs
from ..utils.base_client import BaseClient
from typing import Any, List, Dict, Union, Literal
from datetime import date, datetime


@attrs.define
class Address:

    """
    The shipping address for the order.
    """

    address_line1: str = attrs.field(
        kw_only=True,
    )
    """
    The street address.
    """

    address_line2: str = attrs.field(
        kw_only=True,
    )
    """
    Additional street address information, if required.
    """

    address_line3: str = attrs.field(
        kw_only=True,
    )
    """
    Additional street address information, if required.
    """

    address_type: Union[Literal["Residential"], Literal["Commercial"]] = attrs.field(
        kw_only=True,
    )
    """
    The address type of the shipping address.
    """

    city: str = attrs.field(
        kw_only=True,
    )
    """
    The city
    """

    country_code: str = attrs.field(
        kw_only=True,
    )
    """
    The country code. A two-character country code, in ISO 3166-1 alpha-2 format.
    """

    county: str = attrs.field(
        kw_only=True,
    )
    """
    The county.
    """

    district: str = attrs.field(
        kw_only=True,
    )
    """
    The district.
    """

    municipality: str = attrs.field(
        kw_only=True,
    )
    """
    The municipality.
    """

    name: str = attrs.field(
        kw_only=True,
    )
    """
    The name.
    """

    phone: str = attrs.field(
        kw_only=True,
    )
    """
    The phone number. Not returned for Fulfillment by Amazon (FBA) orders.
    """

    postal_code: str = attrs.field(
        kw_only=True,
    )
    """
    The postal code.
    """

    state_or_region: str = attrs.field(
        kw_only=True,
    )
    """
    The state or region.
    """

    pass


@attrs.define
class AutomatedShippingSettings:

    """
    Contains information regarding the Shipping Settings Automation program, such as whether the order's shipping settings were generated automatically, and what those settings are.
    """

    automated_carrier: str = attrs.field(
        kw_only=True,
    )
    """
    Auto-generated carrier for SSA orders.
    """

    automated_ship_method: str = attrs.field(
        kw_only=True,
    )
    """
    Auto-generated ship method for SSA orders.
    """

    has_automated_shipping_settings: bool = attrs.field(
        kw_only=True,
    )
    """
    If true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.
    """

    pass


@attrs.define
class BuyerCustomizedInfoDetail:

    """
    Buyer information for custom orders from the Amazon Custom program.
    """

    customized_url: str = attrs.field(
        kw_only=True,
    )
    """
    The location of a zip file containing Amazon Custom data.
    """

    pass


@attrs.define
class BuyerInfo:

    """
    Buyer information
    """

    buyer_county: str = attrs.field(
        kw_only=True,
    )
    """
    The county of the buyer.
    """

    buyer_email: str = attrs.field(
        kw_only=True,
    )
    """
    The anonymized email address of the buyer.
    """

    buyer_name: str = attrs.field(
        kw_only=True,
    )
    """
    The name of the buyer.
    """

    purchase_order_number: str = attrs.field(
        kw_only=True,
    )
    """
    The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
    """

    buyer_tax_info: "BuyerTaxInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class BuyerRequestedCancel:

    """
    Information about whether or not a buyer requested cancellation.
    """

    buyer_cancel_reason: str = attrs.field(
        kw_only=True,
    )
    """
    Reason for buyer requesting cancel
    """

    is_buyer_requested_cancel: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the buyer has requested cancellation.
    """

    pass


@attrs.define
class BuyerTaxInfo:

    """
    Tax information about the buyer.
    """

    company_legal_name: str = attrs.field(
        kw_only=True,
    )
    """
    The legal name of the company.
    """

    tax_classifications: List["TaxClassification"] = attrs.field(
        kw_only=True,
    )
    """
    A list of tax classifications that apply to the order.
    """

    taxing_region: str = attrs.field(
        kw_only=True,
    )
    """
    The country or region imposing the tax.
    """

    pass


@attrs.define
class BuyerTaxInformation:

    """
    Contains the business invoice tax information. Available only in the TR marketplace.
    """

    buyer_business_address: str = attrs.field(
        kw_only=True,
    )
    """
    Business buyer's address.
    """

    buyer_legal_company_name: str = attrs.field(
        kw_only=True,
    )
    """
    Business buyer's company legal name.
    """

    buyer_tax_office: str = attrs.field(
        kw_only=True,
    )
    """
    Business buyer's tax office.
    """

    buyer_tax_registration_id: str = attrs.field(
        kw_only=True,
    )
    """
    Business buyer's tax registration ID.
    """

    pass


@attrs.define
class Error:

    """
    Error response returned when the request is unsuccessful.
    """

    code: str = attrs.field(
        kw_only=True,
    )
    """
    An error code that identifies the type of error that occurred.
    """

    details: str = attrs.field(
        kw_only=True,
    )
    """
    Additional details that can help the caller understand or fix the issue.
    """

    message: str = attrs.field(
        kw_only=True,
    )
    """
    A message that describes the error condition in a human-readable form.
    """

    pass


@attrs.define
class ErrorList:

    """
    A list of error responses returned when a request is unsuccessful.
    """

    pass


@attrs.define
class FulfillmentInstruction:

    """
    Contains the instructions about the fulfillment like where should it be fulfilled from.
    """

    fulfillment_supply_source_id: str = attrs.field(
        kw_only=True,
    )
    """
    Denotes the recommended sourceId where the order should be fulfilled from.
    """

    pass


@attrs.define
class GetOrderAddressResponse:

    """
    The response schema for the getOrderAddress operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "OrderAddress" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class GetOrderBuyerInfoResponse:

    """
    The response schema for the getOrderBuyerInfo operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "OrderBuyerInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class GetOrderItemsBuyerInfoResponse:

    """
    The response schema for the getOrderItemsBuyerInfo operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "OrderItemsBuyerInfoList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class GetOrderItemsResponse:

    """
    The response schema for the getOrderItems operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "OrderItemsList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class GetOrderRegulatedInfoResponse:

    """
    The response schema for the getOrderRegulatedInfo operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "OrderRegulatedInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class GetOrderResponse:

    """
    The response schema for the getOrder operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "Order" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class GetOrdersResponse:

    """
    The response schema for the getOrders operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payload: "OrdersList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class ItemBuyerInfo:

    """
    A single item's buyer information.
    """

    gift_message_text: str = attrs.field(
        kw_only=True,
    )
    """
    A gift message provided by the buyer.
    """

    gift_wrap_level: str = attrs.field(
        kw_only=True,
    )
    """
    The gift wrap level specified by the buyer.
    """

    buyer_customized_info: "BuyerCustomizedInfoDetail" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    gift_wrap_price: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    gift_wrap_tax: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class MarketplaceId:

    """
    the unobfuscated marketplace ID
    """

    pass


@attrs.define
class MarketplaceTaxInfo:

    """
    Tax information about the marketplace.
    """

    tax_classifications: List["TaxClassification"] = attrs.field(
        kw_only=True,
    )
    """
    A list of tax classifications that apply to the order.
    """

    pass


@attrs.define
class Money:

    """
    The monetary value of the order.
    """

    amount: str = attrs.field(
        kw_only=True,
    )
    """
    The currency amount.
    """

    currency_code: str = attrs.field(
        kw_only=True,
    )
    """
    The three-digit currency code. In ISO 4217 format.
    """

    pass


@attrs.define
class Order:

    """
    Order information.
    """

    amazon_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order identifier, in 3-7-7 format.
    """

    buyer_invoice_preference: Union[Literal["INDIVIDUAL"], Literal["BUSINESS"]] = attrs.field(
        kw_only=True,
    )
    """
    The buyer's invoicing preference. Available only in the TR marketplace.
    """

    cba_displayable_shipping_label: str = attrs.field(
        kw_only=True,
    )
    """
    Custom ship label for Checkout by Amazon (CBA).
    """

    earliest_delivery_date: str = attrs.field(
        kw_only=True,
    )
    """
    The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
    """

    earliest_ship_date: str = attrs.field(
        kw_only=True,
    )
    """
    The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
        Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.
    """

    easy_ship_shipment_status: str = attrs.field(
        kw_only=True,
    )
    """
    The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.
        Possible values: PendingPickUp, LabelCanceled, PickedUp, OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable, ReturnedToSeller, ReturningToSeller.
    """

    fulfillment_channel: Union[Literal["MFN"], Literal["AFN"]] = attrs.field(
        kw_only=True,
    )
    """
    Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
    """

    has_regulated_items: bool = attrs.field(
        kw_only=True,
    )
    """
    Whether the order contains regulated items which may require additional approval steps before being fulfilled.
    """

    is_business_order: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
    """

    is_estimated_ship_date_set: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
    """

    is_global_express_enabled: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the order is a GlobalExpress order.
    """

    is_iba: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
    """

    is_ispu: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, this order is marked to be picked up from a store rather than delivered.
    """

    is_premium_order: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see "Premium Shipping Options" in the Seller Central Help for your marketplace.
    """

    is_prime: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the order is a seller-fulfilled Amazon Prime order.
    """

    is_replacement_order: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, this is a replacement order.
    """

    is_sold_by_ab: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
    """

    last_update_date: str = attrs.field(
        kw_only=True,
    )
    """
    The date when the order was last updated.
        Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
    """

    latest_delivery_date: str = attrs.field(
        kw_only=True,
    )
    """
    The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
    """

    latest_ship_date: str = attrs.field(
        kw_only=True,
    )
    """
    The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
        Note: LatestShipDate might not be returned for orders placed before February 1, 2013.
    """

    marketplace_id: str = attrs.field(
        kw_only=True,
    )
    """
    The identifier for the marketplace where the order was placed.
    """

    number_of_items_shipped: int = attrs.field(
        kw_only=True,
    )
    """
    The number of items shipped.
    """

    number_of_items_unshipped: int = attrs.field(
        kw_only=True,
    )
    """
    The number of items unshipped.
    """

    order_channel: str = attrs.field(
        kw_only=True,
    )
    """
    The order channel of the first item in the order.
    """

    order_status: Union[
        Literal["Pending"],
        Literal["Unshipped"],
        Literal["PartiallyShipped"],
        Literal["Shipped"],
        Literal["Canceled"],
        Literal["Unfulfillable"],
        Literal["InvoiceUnconfirmed"],
        Literal["PendingAvailability"],
    ] = attrs.field(
        kw_only=True,
    )
    """
    The current order status.
    """

    order_type: Union[
        Literal["StandardOrder"],
        Literal["LongLeadTimeOrder"],
        Literal["Preorder"],
        Literal["BackOrder"],
        Literal["SourcingOnDemandOrder"],
    ] = attrs.field(
        kw_only=True,
    )
    """
    The type of the order.
    """

    payment_method: Union[Literal["COD"], Literal["CVS"], Literal["Other"]] = attrs.field(
        kw_only=True,
    )
    """
    The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
    """

    promise_response_due_date: str = attrs.field(
        kw_only=True,
    )
    """
    Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
    """

    purchase_date: str = attrs.field(
        kw_only=True,
    )
    """
    The date when the order was created.
    """

    replaced_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
    """

    sales_channel: str = attrs.field(
        kw_only=True,
    )
    """
    The sales channel of the first item in the order.
    """

    seller_display_name: str = attrs.field(
        kw_only=True,
    )
    """
    The seller’s friendly name registered in the marketplace.
    """

    seller_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    A seller-defined order identifier.
    """

    ship_service_level: str = attrs.field(
        kw_only=True,
    )
    """
    The shipment service level of the order.
    """

    shipment_service_level_category: str = attrs.field(
        kw_only=True,
    )
    """
    The shipment service level category of the order.
        Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
    """

    automated_shipping_settings: "AutomatedShippingSettings" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    buyer_info: "BuyerInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    buyer_tax_information: "BuyerTaxInformation" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    default_ship_from_location_address: "Address" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    fulfillment_instruction: "FulfillmentInstruction" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    marketplace_tax_info: "MarketplaceTaxInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    order_total: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payment_execution_detail: "PaymentExecutionDetailItemList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    payment_method_details: "PaymentMethodDetailItemList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    shipping_address: "Address" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderAddress:

    """
    The shipping address for the order.
    """

    amazon_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order identifier, in 3-7-7 format.
    """

    shipping_address: "Address" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderBuyerInfo:

    """
    Buyer information for an order.
    """

    amazon_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order identifier, in 3-7-7 format.
    """

    buyer_county: str = attrs.field(
        kw_only=True,
    )
    """
    The county of the buyer.
    """

    buyer_email: str = attrs.field(
        kw_only=True,
    )
    """
    The anonymized email address of the buyer.
    """

    buyer_name: str = attrs.field(
        kw_only=True,
    )
    """
    The name of the buyer.
    """

    purchase_order_number: str = attrs.field(
        kw_only=True,
    )
    """
    The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
    """

    buyer_tax_info: "BuyerTaxInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderItem:

    """
    A single order item.
    """

    asin: str = attrs.field(
        kw_only=True,
    )
    """
    The Amazon Standard Identification Number (ASIN) of the item.
    """

    condition_id: str = attrs.field(
        kw_only=True,
    )
    """
    The condition of the item.
        Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
    """

    condition_note: str = attrs.field(
        kw_only=True,
    )
    """
    The condition of the item as described by the seller.
    """

    condition_subtype_id: str = attrs.field(
        kw_only=True,
    )
    """
    The subcondition of the item.
        Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
    """

    deemed_reseller_category: Union[Literal["IOSS"], Literal["UOSS"]] = attrs.field(
        kw_only=True,
    )
    """
    The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
    """

    ioss_number: str = attrs.field(
        kw_only=True,
    )
    """
    The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
    """

    is_gift: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the item is a gift.
    """

    is_transparency: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, transparency codes are required.
    """

    order_item_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order item identifier.
    """

    price_designation: str = attrs.field(
        kw_only=True,
    )
    """
    Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).
        Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
    """

    quantity_ordered: int = attrs.field(
        kw_only=True,
    )
    """
    The number of items in the order.
    """

    quantity_shipped: int = attrs.field(
        kw_only=True,
    )
    """
    The number of items shipped.
    """

    scheduled_delivery_end_date: str = attrs.field(
        kw_only=True,
    )
    """
    The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
    """

    scheduled_delivery_start_date: str = attrs.field(
        kw_only=True,
    )
    """
    The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
    """

    seller_sku: str = attrs.field(
        kw_only=True,
    )
    """
    The seller stock keeping unit (SKU) of the item.
    """

    serial_number_required: bool = attrs.field(
        kw_only=True,
    )
    """
    When true, the product type for this item has a serial number.
        Returned only for Amazon Easy Ship orders.
    """

    store_chain_store_id: str = attrs.field(
        kw_only=True,
    )
    """
    The store chain store identifier. Linked to a specific store in a store chain.
    """

    title: str = attrs.field(
        kw_only=True,
    )
    """
    The name of the item.
    """

    buyer_info: "ItemBuyerInfo" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    buyer_requested_cancel: "BuyerRequestedCancel" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    codfee: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    codfee_discount: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    item_price: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    item_tax: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    points_granted: "PointsGrantedDetail" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    product_info: "ProductInfoDetail" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    promotion_discount: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    promotion_discount_tax: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    promotion_ids: "PromotionIdList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    shipping_discount: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    shipping_discount_tax: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    shipping_price: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    shipping_tax: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    tax_collection: "TaxCollection" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderItemBuyerInfo:

    """
    A single order item's buyer information.
    """

    gift_message_text: str = attrs.field(
        kw_only=True,
    )
    """
    A gift message provided by the buyer.
    """

    gift_wrap_level: str = attrs.field(
        kw_only=True,
    )
    """
    The gift wrap level specified by the buyer.
    """

    order_item_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order item identifier.
    """

    buyer_customized_info: "BuyerCustomizedInfoDetail" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    gift_wrap_price: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    gift_wrap_tax: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderItemBuyerInfoList:

    """
    A single order item's buyer information list.
    """

    pass


@attrs.define
class OrderItemList:

    """
    A list of order items.
    """

    pass


@attrs.define
class OrderItems:

    """
    the list of order items and quantities when the seller wants to partially update the shipment status of the order
    """

    pass


@attrs.define
class OrderItemsBuyerInfoList:

    """
    A single order item's buyer information list with the order ID.
    """

    amazon_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order identifier, in 3-7-7 format.
    """

    next_token: str = attrs.field(
        kw_only=True,
    )
    """
    When present and not empty, pass this string token in the next request to return the next response page.
    """

    order_items: "OrderItemBuyerInfoList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderItemsList:

    """
    The order items list along with the order ID.
    """

    amazon_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order identifier, in 3-7-7 format.
    """

    next_token: str = attrs.field(
        kw_only=True,
    )
    """
    When present and not empty, pass this string token in the next request to return the next response page.
    """

    order_items: "OrderItemList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrderList:

    """
    A list of orders.
    """

    pass


@attrs.define
class OrderRegulatedInfo:

    """
    The order's regulated information along with its verification status.
    """

    amazon_order_id: str = attrs.field(
        kw_only=True,
    )
    """
    An Amazon-defined order identifier, in 3-7-7 format.
    """

    requires_dosage_label: bool = attrs.field(
        kw_only=True,
    )
    """
    Whether the order requires attaching a dosage information label when shipped.
    """

    regulated_information: "RegulatedInformation" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    regulated_order_verification_status: "RegulatedOrderVerificationStatus" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class OrdersList:

    """
    A list of orders along with additional information to make subsequent API calls.
    """

    created_before: str = attrs.field(
        kw_only=True,
    )
    """
    A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
    """

    last_updated_before: str = attrs.field(
        kw_only=True,
    )
    """
    A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format.
    """

    next_token: str = attrs.field(
        kw_only=True,
    )
    """
    When present and not empty, pass this string token in the next request to return the next response page.
    """

    orders: "OrderList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class PaymentExecutionDetailItem:

    """
    Information about a sub-payment method used to pay for a COD order.
    """

    payment_method: str = attrs.field(
        kw_only=True,
    )
    """
    A sub-payment method for a COD order.
        Possible values:
        * COD - Cash On Delivery.
        * GC - Gift Card.
        * PointsAccount - Amazon Points.
    """

    payment: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class PaymentExecutionDetailItemList:

    """
    A list of payment execution detail items.
    """

    pass


@attrs.define
class PaymentMethodDetailItemList:

    """
    A list of payment method detail items.
    """

    pass


@attrs.define
class PointsGrantedDetail:

    """
    The number of Amazon Points offered with the purchase of an item, and their monetary value.
    """

    points_number: int = attrs.field(
        kw_only=True,
    )
    """
    The number of Amazon Points granted with the purchase of an item.
    """

    points_monetary_value: "Money" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class ProductInfoDetail:

    """
    Product information on the number of items.
    """

    number_of_items: int = attrs.field(
        kw_only=True,
    )
    """
    The total number of items that are included in the ASIN.
    """

    pass


@attrs.define
class PromotionIdList:

    """
    A list of promotion identifiers provided by the seller when the promotions were created.
    """

    pass


@attrs.define
class RegulatedInformation:

    """
    The regulated information collected during purchase and used to verify the order.
    """

    fields: List["RegulatedInformationField"] = attrs.field(
        kw_only=True,
    )
    """
    A list of regulated information fields as collected from the regulatory form.
    """

    pass


@attrs.define
class RegulatedInformationField:

    """
    A field collected from the regulatory form.
    """

    field_id: str = attrs.field(
        kw_only=True,
    )
    """
    The unique identifier for the field.
    """

    field_label: str = attrs.field(
        kw_only=True,
    )
    """
    The human-readable name for the field.
    """

    field_type: Union[Literal["Text"], Literal["FileAttachment"]] = attrs.field(
        kw_only=True,
    )
    """
    The type of field the field.
    """

    field_value: str = attrs.field(
        kw_only=True,
    )
    """
    The content of the field as collected in regulatory form. Note that FileAttachment type fields will contain an URL to download the attachment here.
    """

    pass


@attrs.define
class RegulatedOrderVerificationStatus:

    """
    The verification status of the order along with associated approval or rejection metadata.
    """

    external_reviewer_id: str = attrs.field(
        kw_only=True,
    )
    """
    The identifier for the order's regulated information reviewer.
    """

    requires_merchant_action: bool = attrs.field(
        kw_only=True,
    )
    """
    Whether the regulated information provided in the order requires a review by the merchant.
    """

    review_date: str = attrs.field(
        kw_only=True,
    )
    """
    The date the order was reviewed. In ISO 8601 date time format.
    """

    status: Union[
        Literal["Pending"], Literal["Approved"], Literal["Rejected"], Literal["Expired"], Literal["Cancelled"]
    ] = attrs.field(
        kw_only=True,
    )
    """
    The verification status of the order.
    """

    valid_rejection_reasons: List["RejectionReason"] = attrs.field(
        kw_only=True,
    )
    """
    A list of valid rejection reasons that may be used to reject the order's regulated information.
    """

    rejection_reason: "RejectionReason" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class RejectionReason:

    """
    The reason for rejecting the order's regulated information. Not present if the order isn't rejected.
    """

    rejection_reason_description: str = attrs.field(
        kw_only=True,
    )
    """
    The human-readable description of this rejection reason.
    """

    rejection_reason_id: str = attrs.field(
        kw_only=True,
    )
    """
    The unique identifier for the rejection reason.
    """

    pass


@attrs.define
class ShipmentStatus:

    """
    the status of the shipment of the order to be updated
    """

    pass


@attrs.define
class TaxClassification:

    """
    The tax classification for the order.
    """

    name: str = attrs.field(
        kw_only=True,
    )
    """
    The type of tax.
    """

    value: str = attrs.field(
        kw_only=True,
    )
    """
    The buyer's tax identifier.
    """

    pass


@attrs.define
class TaxCollection:

    """
    Information about withheld taxes.
    """

    model: Union[Literal["MarketplaceFacilitator"]] = attrs.field(
        kw_only=True,
    )
    """
    The tax collection model applied to the item.
    """

    responsible_party: Union[Literal["Amazon Services, Inc."]] = attrs.field(
        kw_only=True,
    )
    """
    The party responsible for withholding the taxes and remitting them to the taxing authority.
    """

    pass


@attrs.define
class UpdateShipmentStatusErrorResponse:

    """
    The error response schema for the UpdateShipmentStatus operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class UpdateShipmentStatusRequest:

    """
    Request to update the status of shipment of an order.
    """

    marketplace_id: "MarketplaceId" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    order_items: "OrderItems" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    shipment_status: "ShipmentStatus" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class UpdateVerificationStatusErrorResponse:

    """
    The error response schema for the UpdateVerificationStatus operation.
    """

    errors: "ErrorList" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class UpdateVerificationStatusRequest:

    """
    Request to update the verification status of an order containing regulated products.
    """

    regulated_order_verification_status: "UpdateVerificationStatusRequestBody" = attrs.field(
        kw_only=True,
    )
    """
    no description.
    """

    pass


@attrs.define
class UpdateVerificationStatusRequestBody:

    """
    The updated values of the VerificationStatus field.
    """

    external_reviewer_id: str = attrs.field(
        kw_only=True,
    )
    """
    The identifier for the order's regulated information reviewer.
    """

    rejection_reason_id: str = attrs.field(
        kw_only=True,
    )
    """
    The unique identifier for the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected.
    """

    status: Union[Literal["Approved"], Literal["Rejected"]] = attrs.field(
        kw_only=True,
    )
    """
    The new verification status of the order.
    """

    pass


class OrdersV0Client(BaseClient):
    def get_order(
        self,
        order_id: str,
    ):
        """
        Returns the order indicated by the specified order ID.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An Amazon-defined order identifier, in 3-7-7 format.
        """
        url = "/orders/v0/orders/{orderId}"
        values = (order_id,)
        response = self._parse_args_and_request(url, "GET", values, self._get_order_params)
        return response

    _get_order_params = (("orderId", "path"),)  # name, param in

    def get_order_address(
        self,
        order_id: str,
    ):
        """
        Returns the shipping address for the specified order.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An orderId is an Amazon-defined order identifier, in 3-7-7 format.
        """
        url = "/orders/v0/orders/{orderId}/address"
        values = (order_id,)
        response = self._parse_args_and_request(url, "GET", values, self._get_order_address_params)
        return response

    _get_order_address_params = (("orderId", "path"),)  # name, param in

    def get_order_buyer_info(
        self,
        order_id: str,
    ):
        """
        Returns buyer information for the specified order.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An orderId is an Amazon-defined order identifier, in 3-7-7 format.
        """
        url = "/orders/v0/orders/{orderId}/buyerInfo"
        values = (order_id,)
        response = self._parse_args_and_request(url, "GET", values, self._get_order_buyer_info_params)
        return response

    _get_order_buyer_info_params = (("orderId", "path"),)  # name, param in

    def get_order_items(
        self,
        order_id: str,
        next_token: str = None,
    ):
        """
        Returns detailed order item information for the order indicated by the specified order ID. If NextToken is provided, it's used to retrieve the next page of order items.

        Note: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An Amazon-defined order identifier, in 3-7-7 format.
            next_token: A string token returned in the response of your previous request.
        """
        url = "/orders/v0/orders/{orderId}/orderItems"
        values = (
            order_id,
            next_token,
        )
        response = self._parse_args_and_request(url, "GET", values, self._get_order_items_params)
        return response

    _get_order_items_params = (  # name, param in
        ("orderId", "path"),
        ("NextToken", "query"),
    )

    def get_order_items_buyer_info(
        self,
        order_id: str,
        next_token: str = None,
    ):
        """
        Returns buyer information for the order items in the specified order.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An Amazon-defined order identifier, in 3-7-7 format.
            next_token: A string token returned in the response of your previous request.
        """
        url = "/orders/v0/orders/{orderId}/orderItems/buyerInfo"
        values = (
            order_id,
            next_token,
        )
        response = self._parse_args_and_request(url, "GET", values, self._get_order_items_buyer_info_params)
        return response

    _get_order_items_buyer_info_params = (  # name, param in
        ("orderId", "path"),
        ("NextToken", "query"),
    )

    def get_order_regulated_info(
        self,
        order_id: str,
    ):
        """
        Returns regulated information for the order indicated by the specified order ID.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An orderId is an Amazon-defined order identifier, in 3-7-7 format.
        """
        url = "/orders/v0/orders/{orderId}/regulatedInfo"
        values = (order_id,)
        response = self._parse_args_and_request(url, "GET", values, self._get_order_regulated_info_params)
        return response

    _get_order_regulated_info_params = (("orderId", "path"),)  # name, param in

    def get_orders(
        self,
        marketplace_ids: List[str],
        created_after: str = None,
        created_before: str = None,
        last_updated_after: str = None,
        last_updated_before: str = None,
        order_statuses: List[str] = None,
        fulfillment_channels: List[str] = None,
        payment_methods: List[str] = None,
        buyer_email: str = None,
        seller_order_id: str = None,
        max_results_per_page: int = None,
        easy_ship_shipment_statuses: List[str] = None,
        next_token: str = None,
        amazon_order_ids: List[str] = None,
        actual_fulfillment_supply_source_id: str = None,
        is_ispu: bool = None,
        store_chain_store_id: str = None,
    ):
        """
        Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            created_after: A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format.
            created_before: A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
            last_updated_after: A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
            last_updated_before: A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
            order_statuses: A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.).
            marketplace_ids: A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
                See the [Selling Partner API Developer Guide](doc:marketplace-ids) for a complete list of marketplaceId values.
            fulfillment_channels: A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller).
            payment_methods: A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS).
            buyer_email: The email address of a buyer. Used to select orders that contain the specified email address.
            seller_order_id: An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
            max_results_per_page: A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
            easy_ship_shipment_statuses: A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller).
            next_token: A string token returned in the response of your previous request.
            amazon_order_ids: A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
            actual_fulfillment_supply_source_id: Denotes the recommended sourceId where the order should be fulfilled from.
            is_ispu: When true, this order is marked to be picked up from a store rather than delivered.
            store_chain_store_id: The store chain store identifier. Linked to a specific store in a store chain.
        """
        url = "/orders/v0/orders"
        values = (
            created_after,
            created_before,
            last_updated_after,
            last_updated_before,
            order_statuses,
            marketplace_ids,
            fulfillment_channels,
            payment_methods,
            buyer_email,
            seller_order_id,
            max_results_per_page,
            easy_ship_shipment_statuses,
            next_token,
            amazon_order_ids,
            actual_fulfillment_supply_source_id,
            is_ispu,
            store_chain_store_id,
        )
        response = self._parse_args_and_request(url, "GET", values, self._get_orders_params)
        return response

    _get_orders_params = (  # name, param in
        ("CreatedAfter", "query"),
        ("CreatedBefore", "query"),
        ("LastUpdatedAfter", "query"),
        ("LastUpdatedBefore", "query"),
        ("OrderStatuses", "query"),
        ("MarketplaceIds", "query"),
        ("FulfillmentChannels", "query"),
        ("PaymentMethods", "query"),
        ("BuyerEmail", "query"),
        ("SellerOrderId", "query"),
        ("MaxResultsPerPage", "query"),
        ("EasyShipShipmentStatuses", "query"),
        ("NextToken", "query"),
        ("AmazonOrderIds", "query"),
        ("ActualFulfillmentSupplySourceId", "query"),
        ("IsISPU", "query"),
        ("StoreChainStoreId", "query"),
    )

    def update_shipment_status(
        self,
        order_id: str,
        marketplace_id: str,
        shipment_status: Union[Literal["ReadyForPickup"], Literal["PickedUp"], Literal["RefusedPickup"]],
        order_items: List[Dict[str, Any]] = None,
    ):
        """
        Update the shipment status.

        Args:
            order_id: An Amazon-defined order identifier, in 3-7-7 format.
            marketplace_id: the unobfuscated marketplace ID
            order_items: the list of order items and quantities when the seller wants to partially update the shipment status of the order
            shipment_status: the status of the shipment of the order to be updated
        """
        url = "/orders/v0/orders/{orderId}/shipment"
        values = (
            order_id,
            marketplace_id,
            order_items,
            shipment_status,
        )
        response = self._parse_args_and_request(url, "POST", values, self._update_shipment_status_params)
        return response

    _update_shipment_status_params = (  # name, param in
        ("orderId", "path"),
        ("marketplaceId", "body"),
        ("orderItems", "body"),
        ("shipmentStatus", "body"),
    )

    def update_verification_status(
        self,
        order_id: str,
        regulated_order_verification_status: Dict[str, Any],
    ):
        """
        Updates (approves or rejects) the verification status of an order containing regulated products.

        **Usage Plans:**

        | Plan type | Rate (requests per second) | Burst |
        | ---- | ---- | ---- |
        |Default| 0.0055 | 20 |
        |Selling partner specific| Variable | Variable |

        The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.

        Args:
            order_id: An orderId is an Amazon-defined order identifier, in 3-7-7 format.
            regulated_order_verification_status: The updated values of the VerificationStatus field.
        """
        url = "/orders/v0/orders/{orderId}/regulatedInfo"
        values = (
            order_id,
            regulated_order_verification_status,
        )
        response = self._parse_args_and_request(url, "PATCH", values, self._update_verification_status_params)
        return response

    _update_verification_status_params = (  # name, param in
        ("orderId", "path"),
        ("regulatedOrderVerificationStatus", "body"),
    )
